name: sss

on: 
  # workflow_dispatch:
  push:
    branches:
      - main
    
permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR

jobs:
  packer_job:
    name: Provision Base Image
    runs-on: ubuntu-latest
    environment: Packer

    # if: ${{ github.event_name != 'push' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::882743124337:role/infra-sls-role
          # role-to-assume: {{ secrets.ROLE_TO_ASSUME }}
          aws-region: ap-south-1
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Setup `packer` (using local GitHub Action)
        uses: "hashicorp/setup-packer@main"
        id: setup

      - name: Print `packer` version
        run: packer version

      - name: Packer Init
        id: init-p
        working-directory: ./images
        run: packer init .

      - name: Packer Validate
        id: validate-p
        run: packer validate ./images/image.pkr.hcl

      - name: Packer Build
        id: build-p
        run: packer build ./images/image.pkr.hcl
  

  
  terraform_job:
    name: Terraform Deployment
    needs: packer_job
    runs-on: ubuntu-latest
    environment: Terraform

    # if: ${{ github.event_name != 'push' }}

    steps:
      
      - name: Print Environment Name
        run: |
          echo ${{ github.environment}}
          echo "${{ github.environment}}"
          echo "Environment Name: ${{ env.GITHUB_ENV }}"
      
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::882743124337:role/infra-sls-role
          # role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: ap-south-1
          role-session-name: GitHub-OIDC-TERRAFORM
    

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.5

      - name: Terraform Init
        working-directory: ./terraform
        id: init
        env:
          AWS_BUCKET_NAME: github-oidc-aws-tfstates-lk
          AWS_BUCKET_KEY_NAME: infra2.tfstate
          AWS_REGION: ap-south-1
        run: |
          terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"
          terraform validate -no-color

      - name: Plan and Apply
        working-directory: ./terraform
        run: |
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan  

      # Serverless github repo suggestion:
      #
      # - name: Use Node.js ${{ matrix.node-version }}
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: ${{ matrix.node-version }}
      #   # - run: npm ci

      # - name: serverless deploy
      #   uses: serverless/github-action@v2
      #   with:
      #     args: deploy
      # # - run: npm install -g serverless
      #   env:
      #     # SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
      #     # or if using AWS credentials directly
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}



  serverless_job:
    name: Serverless Deployment
    runs-on: ubuntu-latest
    needs: terraform_job
    environment: Serverless

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18.x

      - name: Install serverless globally
        run: npm install -g serverless

      - name: Deploy or Remove Serverless Application
        # uses: serverless/github-action@v3.2
        # with:
        #   args: deploy
        working-directory: ./sls
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          if [[ "${{ github.event.head_commit.message }}" == "deploy" ]]; then
            echo "Deploying Serverless application..."
            sls deploy
          elif [[ "${{ github.event.head_commit.message }}" == "remove" ]]; then
            echo "Removing Serverless application..."
            sls remove
          else
            echo "Commit message does not require deployment or removal."
            exit 0
          fi
          
      - name: Use deployed URL
        run: |
          echo "Deployed URL: ${{ env.URL }}"